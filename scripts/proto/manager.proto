// Copyright 2025 Amiasys Corporation and/or its affiliates. All rights reserved.

syntax = "proto3";

option go_package = "./;manager";

package asn_controller;

// The greeting service definition.
service Manager {
  // ASNC related operations
  rpc GetInfo(Empty) returns (ControllerInfo) {}
  rpc UpdatePort(UpdatePortReq) returns (Empty) {}

  //Auth API
  rpc Login(LoginRequest) returns (LoginResponse) {}
  rpc TokenRefresh(TokenRefreshRequest) returns (AccessToken) {}
  rpc CheckAuthToken(Empty) returns (GeneralResponse) {}
  rpc GetTokenAuth(Empty) returns (GetTokenAuthResponse) {}
  rpc CreateUser(CreateUserRequest) returns (GeneralResponse){}
  rpc DeleteUser(DeleteUserRequest) returns (GeneralResponse){}
  rpc GetUsers(Empty) returns (Users){}

  rpc GetGroups(Empty) returns (Groups){}
  rpc CreateGroup(Group) returns (GeneralResponse) {}
  rpc DeleteGroup(Group) returns (GeneralResponse) {}
  rpc SetGroupService(Group) returns (GeneralResponse){}
  rpc AddNodesToGroup(Group) returns (GeneralResponse){}
  rpc RemoveNodesFromGroup(Group) returns (GeneralResponse){}
  rpc AddUserToGroup(UserGroupRequest) returns (GeneralResponse) {}
  rpc RemoveUserFromGroup(UserGroupRequest) returns (GeneralResponse) {}

  // Network API
  rpc GetNetwork(Empty) returns (Network) {}

  // Links API
  rpc GetLinkById (Id) returns (Network.Link) {}
  rpc GetLinksOfNetwork (Empty) returns (Network.Links) {}
  rpc GetLinksOfGroup (Id) returns (Network.Links) {}
  rpc GetLinksOfNode (Id) returns (Network.Links) {}
  rpc GetLinkOfNodePair (Network.NodePair) returns (Network.Link) {}

  // nodes API
  rpc GetNodeById (Id) returns (Network.Node) {}
  rpc GetNodesOfNetwork (Empty) returns (Network.Nodes) {}
  rpc GetNodesOfGroup (Id) returns (Network.Nodes) {}
  rpc GetNodesOfLink (Id) returns (Network.Nodes) {}

  // Service Node API
  rpc GetServiceNodesOfNetwork (Empty) returns (Service.Nodes) {}

  // Service API
  rpc GetSNsServiceStateOfNetwork (GetSNsServiceStateRequest) returns (Service.Services) {}
  rpc GetSNsServiceStateOfGroup (GetSNsServiceStateRequest) returns (Service.Services) {}
  rpc GetSNsServiceStateOfSNs (GetSNsServiceStateRequest) returns (Service.Services) {}

  rpc GetServicesConfigOfNetwork (Name) returns (GetServicesConfigResponse) {}
  rpc GetServicesConfigOfGroup (NameAndId) returns (GetServicesConfigResponse) {}
  rpc GetServicesConfigOfNode(NameAndId) returns (GetServicesConfigResponse) {}

  rpc ApplyServiceOps (ConfigRequest) returns (GeneralResponse) {}
  rpc StartService (ConfigRequest) returns (GeneralResponse) {}
  rpc StopService (ConfigRequest) returns (GeneralResponse) {}

  // Get Stats
  rpc GetCpuUsage(StatsRequest) returns (Network.Stats.Percentage) {}
  rpc GetSystemLoad(StatsRequest) returns (Network.Stats.Percentage) {}
  rpc GetRamUsage(StatsRequest) returns (Network.Stats.Percentage) {}

  rpc GetReceivedBits(StatsRequest) returns (Network.Stats.Traffic) {}
  rpc GetSentBits(StatsRequest) returns (Network.Stats.Traffic) {}
  rpc GetAsnReceivedPackets(StatsRequest) returns (Network.Stats.Traffic) {}
  rpc GetAsnBlockedPackets(StatsRequest) returns (Network.Stats.Traffic) {}
  rpc GetAsnReceivedBits(StatsRequest) returns (Network.Stats.Traffic) {}
  rpc GetAsnBlockedBits(StatsRequest) returns (Network.Stats.Traffic) {}
  rpc GetThroughput(StatsRequest) returns (Network.Stats) {}

  rpc GetTotalReceivedBits(StatsRequest) returns (Network.Stats.Traffic) {}
  rpc GetTotalSentBits(StatsRequest) returns (Network.Stats.Traffic) {}
  rpc GetTotalAsnReceivedPackets(StatsRequest) returns (Network.Stats.Traffic) {}
  rpc GetTotalAsnBlockedPackets(StatsRequest) returns (Network.Stats.Traffic) {}
  rpc GetTotalAsnReceivedBits(StatsRequest) returns (Network.Stats.Traffic) {}
  rpc GetTotalAsnBlockedBits(StatsRequest) returns (Network.Stats.Traffic) {}
  rpc GetTotalTraffic(StatsRequest) returns (Network.Stats) {}

  rpc GetAsnReceivedPacketsByTime(StatsRequest) returns (TimeSerialTraffics) {}
  rpc GetAsnBlockedPacketsByTime(StatsRequest) returns (TimeSerialTraffics) {}
  rpc GetAsnReceivedBitsByTime(StatsRequest) returns (TimeSerialTraffics) {}
  rpc GetAsnBlockedBitsByTime(StatsRequest) returns (TimeSerialTraffics) {}
  rpc GetTimeSerialTraffic(StatsRequest) returns (Network.StatsList){}

  rpc GetNetReceivedBitsByTime(StatsRequest) returns (TimeSerialTraffics) {}
  rpc GetNetSentBitsByTime(StatsRequest) returns (TimeSerialTraffics) {}
}

/*
  Request message
 */
message ControllerInfo {
  message PluginVersion {
    string min = 1;
    string max = 2;
    string current = 3;
  }

  string asnc_version = 1;
  map<string, PluginVersion> plugin_versions = 2;
  uint32 port = 3;
  uint32 port_pending = 4;
}

message UpdatePortReq {
  uint32 port = 1;
}

message Empty{}

message Id {
  string id = 1;
}

message Name {
  string name = 1;
}

message NameAndId {
  string name = 1;
  string id = 2;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message TokenRefreshRequest {
  string access_token = 1;
  string refresh_token = 2;
}

message AccessToken {
  string access_token = 1;
}

message CreateUserRequest {
  string username = 1;
  string password = 2;
}

message DeleteUserRequest {
  string username = 1;
}

message UserGroupRequest {
  string username = 1;
  string group = 2;
  string role = 3;
}

message Users {
  repeated User users = 1;
}

message User {
  message GroupAuth {
    string group_name = 1;
    string user_role = 2;
  }

  string username = 1;
  bool supervisor = 3;
  repeated GroupAuth group_auth = 4;
}

message Groups {
  repeated Group groups = 1;
}

message Group {
  message ManagedService {
    string name = 1;
    bool installation = 2;
    string mode = 3;
  }

  string name = 1;
  map<string, ManagedService> managed_services = 2;
  repeated string nodes = 3;
}

message LoginResponse {
  string access_token = 1;
  string refresh_token = 2;
  bool supervisor = 3;
}

message GetTokenAuthResponse{
  bool is_supervisor = 1;
}

message StatsRequest {
  bool all_network = 1;
  string group = 2;
  repeated string netifs = 3;
  string start_time = 4;
  string end_time = 5;
}

message GeneralResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }

  Status status = 1;
}

message GetSNsServiceStateRequest {
  string group_name = 1;
  repeated string nodes = 2;
  string service_name = 3;
}

message GetServicesConfigResponse {
  bytes config = 1;
}

message ConfigRequest {
  bool all_network = 1;
  string group = 2;
  repeated string service_nodes = 3;
  string service_name = 4;
  bytes metadata = 5;
}

message GetLogsByLimitRequest {
  int64 limit = 1;
}

message RegistrationResponse {
  string client_name = 1;
  string server_name = 2;
  /* uint64 clientCookie = 3; Cookie assigned by the server which is used in further communications */
}

/*
  Utils message
 */
message Location {
  float latitude = 1;
  float longitude = 2;
  string address = 3;
}

/*
  Network message
 */
message Network {
  string id = 1;
  string name = 2;
  string type = 3;
  repeated Node.Desc nodes = 4;
  repeated Link.Desc links = 5;
  Stats stats = 6;
  message Nodes {
    repeated Node nodes = 1;
  }
  message Node {
    string id = 1;
    string type = 2;
    string name = 3;
    string group = 4;
    string network_id = 5;
    string parent_id = 6;
    Location location = 7;
    repeated string external_linked = 8;
    repeated string internal_linked = 9;
    Service.Node service_node = 10;
    Stats stats = 11;
    repeated Port.Desc ports = 12;
    repeated Interface interfaces = 13;

    message Desc{
      string id = 1;
      string type = 2;
      string name = 3;
    }

    message Interface {
      string name = 1;
      int64 capacity = 2;
    }
    message Port {
      string id = 1;
      string name = 2;
      string node_id = 3;
      int64 capacity = 4;
      repeated string linked_ports = 5;
      string stats = 6;
      message Desc {
        string id = 1;
        string name = 2;
      }
    }
    message Stats {
      uint64 rx = 1;
      uint64 tx = 2;
      uint64 asn_received_packets = 3;
      uint64 asn_blocked_packets = 4;
      uint64 asn_received_bits = 5;
      uint64 asn_blocked_bits = 6;
      float  cpu_usage = 7;
    }
    message NetStats {
      string node_id = 1;
      string node_name = 2;
      uint64 send_bits = 3;
      uint64 received_bits = 4;
    }
  }
  message Links {
    repeated Link links = 1;
  }
  message Link {
    string id = 1;
    string name = 2;
    repeated string port_pair = 3;
    repeated Network.Node node_pair = 4;
    Stats stats = 5;

    message Desc {
      string id = 1;
      string name = 2;
    }
    message Stats {
      uint64 node1_to_node2 = 1;
      uint64 node2_to_node1 = 2;
    }
  }
  message NodePair{
    string id1 = 1;
    string id2 = 2;
  }

  message StatsList {
    repeated Stats stats_list = 1;
  }

  message Stats {
    uint64  received_bits = 1;
    uint64  sent_bits = 2;
    uint64  asn_received_bits = 3;
    uint64  asn_blocked_bits = 4;
    uint64  asn_received_pkts = 5;
    uint64  asn_blocked_pkts = 6;
    string  timestamp = 7;
    message Percentage {
      float value = 1;
    }
    message Traffic {
      uint64 value = 1;
    }
  }

}

/*
  Service message
 */
message Service {
  message Nodes {
    repeated Node nodes = 1;
  }
  message Node {
    string network_id = 1;
    string host_id = 2;
    string last_beat = 3;
    string type = 4;
    map<string, bool> capabilities = 5;
    SystemInfo system_info = 66;
    string state = 7;
    message SystemInfo {
      Cpu cpu = 1;
      Memory memory = 2;
      Disk disk = 3;
      int64 network_capacity = 4;
      string machine_id = 5;

      message Cpu {
        int64 core = 1;
        string brand = 2;
      }
      message Memory {
        int64 total = 1;
      }
      message Disk {
        int64 total = 1;
      }
    }
    message Netif {
      repeated string data = 1;
      repeated string control = 2;
      repeated string management = 3;
    }
    string mode = 10;
  }

  message Services {
    repeated Service services = 1;
  }

  message Service {
    string service_node_id = 1;
    string state = 2;
    bytes config = 3;
    bytes status =4;
  }
}

message TimeSerialTraffics {
  repeated TimeSerialTraffic time_serial_traffics = 1;
}

message TimeSerialTraffic {
  uint64 value = 1;
  string timestamp = 2;
}
